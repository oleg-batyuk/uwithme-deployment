# nginx-proxy version : 1.0.4
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent" '
                 '"$upstream_addr"';
access_log off;
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
		
error_log /dev/stderr;
resolver 127.0.0.11;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header X-Original-URI $request_uri;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
	# auth.uwm.int
upstream auth.uwm.int {
        ## Can be connected with "uwithme-deployment-master_uwithme-network" network
        # uwithme-keycloak
        server auth.ecs.service:8080;
}
server {
	server_name auth.uwm.int;
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		proxy_pass http://auth.uwm.int;
}
}
server {
	server_name auth.uwm.int;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;
	return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
	# bot.uwm.int
# upstream bot.uwm.int {
#         ## Can be connected with "uwithme-deployment-master_uwithme-network" network
#         # uwithme-bot
#         server 192.168.16.8:8010;
# }
# server {
# 	server_name bot.uwm.int;
# 	listen 80 ;
# 	access_log /var/log/nginx/access.log vhost;
# 	include /etc/nginx/vhost.d/default;
# 	location / {
# 		proxy_pass http://bot.uwm.int;
# }
# }
# server {
# 	server_name bot.uwm.int;
# 	listen 443 ssl http2 ;
# 	access_log /var/log/nginx/access.log vhost;
# 	return 500;
# 	ssl_certificate /etc/nginx/certs/default.crt;
# 	ssl_certificate_key /etc/nginx/certs/default.key;
# }
	# service1.uwm.int
upstream service1.uwm.int {
        ## Can be connected with "uwithme-deployment-master_uwithme-network" network
        # uwithme-service
        server service1.ecs.service:8081;
}
server {
	server_name service1.uwm.int;
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		proxy_pass http://service1.uwm.int;
}
}
server {
	server_name service1.uwm.int;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;
	return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
	# service2.uwm.int
upstream service2.uwm.int {
        ## Can be connected with "uwithme-deployment-master_uwithme-network" network
        # uwithme-tests-service
        server service2.ecs.service:8090;
}
server {
	server_name service2.uwm.int;
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		proxy_pass http://service2.uwm.int;
}
}
server {
	server_name service2.uwm.int;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;
	return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
	# tests.uwm.int
upstream tests.uwm.int {
        ## Can be connected with "uwithme-deployment-master_uwithme-network" network
        # uwithme-tests-ui
        server tests.ecs.service:8091;
}
server {
	server_name tests.uwm.int;
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		proxy_pass http://tests.uwm.int;
}
}
server {
	server_name tests.uwm.int;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;
	return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
	# uwm.int
upstream uwm.int {
        ## Can be connected with "uwithme-deployment-master_uwithme-network" network
        # uwithme-ui
        server uwm.ecs.service:8082;
}
server {
	server_name uwm.int;
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		proxy_pass http://uwm.int;
}
}
server {
	server_name uwm.int;
	listen 443 ssl http2 ;
	access_log /var/log/nginx/access.log vhost;
	return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

server {
	listen 80 ;
	access_log /var/log/nginx/access.log vhost;
	include /etc/nginx/vhost.d/default;
	location / {
		return 200;
	}
}
proxy_buffer_size 128k;
proxy_buffers 4 256k;
proxy_busy_buffers_size 256k;